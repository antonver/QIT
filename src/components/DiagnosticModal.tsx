import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  CircularProgress,
  Alert,
  Chip,
} from '@mui/material';
import { diagnoseServerAuth } from '../utils/telegram';

interface DiagnosticModalProps {
  open: boolean;
  onClose: () => void;
}

interface DiagnosticResult {
  status: string;
  serverConfig?: any;
  validationResult?: any;
  recommendations: string[];
}

const DiagnosticModal: React.FC<DiagnosticModalProps> = ({ open, onClose }) => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<DiagnosticResult | null>(null);

  const runDiagnostic = async () => {
    setLoading(true);
    setResult(null);

    try {
      const status = await diagnoseServerAuth();
      
      // Get additional info from console logs
      const { debugAuthConfig, debugValidateTelegramData } = await import('../services/aeonMessengerApi');
      const { getTelegramInitData } = await import('../utils/telegram');
      
      let serverConfig;
      let validationResult;
      let recommendations: string[] = [];

      try {
        serverConfig = await debugAuthConfig();
      } catch (e) {
        serverConfig = { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞' };
      }

      const initData = getTelegramInitData();
      if (initData) {
        try {
          validationResult = await debugValidateTelegramData(initData);
        } catch (e) {
          validationResult = { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é' };
        }
      }

      // Generate recommendations based on status
      switch (status) {
        case 'server_no_token':
          recommendations = [
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
            '–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Heroku',
            '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞'
          ];
          break;
        case 'validation_failed':
          recommendations = [
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –≤ @BotFather',
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ Telegram',
            '–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –±–æ—Ç—É, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
          ];
          break;
        case 'validation_success':
          recommendations = [
            '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π',
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'
          ];
          break;
        default:
          recommendations = [
            '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ Telegram',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
            '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'
          ];
      }

      setResult({
        status,
        serverConfig,
        validationResult,
        recommendations
      });
    } catch (error) {
      setResult({
        status: 'error',
        recommendations: ['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π']
      });
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'validation_success': return 'success';
      case 'server_no_token':
      case 'validation_failed': return 'error';
      default: return 'warning';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'server_no_token': return '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      case 'validation_failed': return '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞';
      case 'validation_success': return '–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞';
      case 'server_config_error': return '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞';
      case 'validation_error': return '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏';
      case 'no_data': return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      case 'general_error': return '–û–±—â–∞—è –æ—à–∏–±–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</DialogTitle>
      <DialogContent>
        {!loading && !result && (
          <Box sx={{ textAlign: 'center', py: 3 }}>
            <Typography variant="body1" sx={{ mb: 2 }}>
              –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </Typography>
          </Box>
        )}

        {loading && (
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', py: 4 }}>
            <CircularProgress sx={{ mr: 2 }} />
            <Typography>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...</Typography>
          </Box>
        )}

        {result && (
          <Box sx={{ py: 2 }}>
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" sx={{ mb: 1 }}>
                –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
              </Typography>
              <Chip 
                label={getStatusText(result.status)}
                color={getStatusColor(result.status)}
                sx={{ mb: 2 }}
              />
            </Box>

            {result.serverConfig && (
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ mb: 1 }}>
                  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:
                </Typography>
                <Alert severity={result.serverConfig.telegram_bot_token_set ? 'success' : 'error'}>
                  <Typography variant="body2">
                    –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {result.serverConfig.telegram_bot_token_set ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                  </Typography>
                  <Typography variant="body2">
                    –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {result.serverConfig.debug_mode ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}
                  </Typography>
                </Alert>
              </Box>
            )}

            {result.validationResult && (
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ mb: 1 }}>
                  –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
                </Typography>
                <Alert severity={result.validationResult.success ? 'success' : 'error'}>
                  <Typography variant="body2">
                    –í–∞–ª–∏–¥–∞—Ü–∏—è: {result.validationResult.success ? '‚úÖ –£—Å–ø–µ—à–Ω–∞' : '‚ùå –ù–µ –ø—Ä–æ—à–ª–∞'}
                  </Typography>
                </Alert>
              </Box>
            )}

            <Box sx={{ mb: 2 }}>
              <Typography variant="h6" sx={{ mb: 1 }}>
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
              </Typography>
              {result.recommendations.map((rec, index) => (
                <Typography key={index} variant="body2" sx={{ mb: 1, pl: 2 }}>
                  ‚Ä¢ {rec}
                </Typography>
              ))}
            </Box>
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        {!result && (
          <Button 
            onClick={runDiagnostic} 
            disabled={loading}
            variant="contained"
            color="primary"
          >
            –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
          </Button>
        )}
        {result && (
          <Button onClick={runDiagnostic} variant="outlined">
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
          </Button>
        )}
        <Button onClick={onClose}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default DiagnosticModal; 