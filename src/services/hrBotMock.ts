// –ú–æ–∫-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HRBot –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
import type { SessionResponse, Question, GlyphResponse } from './hrBotApi';

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤
const MOCK_QUESTIONS: Question[] = [
  {
    id: '1',
    text: '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –ß—Ç–æ –±—ã –≤—ã –¥–µ–ª–∞–ª–∏ –∏ –∫–∞–∫ –±—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏?',
    type: 'text',
  },
  {
    id: '2', 
    text: '–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –Ω–∞ —Ä–∞–±–æ—Ç–µ?',
    type: 'choice',
    options: [
      '–î–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤—ã –∏ –º–µ–¥–∏—Ç–∏—Ä—É—é',
      '–û–±—Ä–∞—â–∞—é—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∫–æ–ª–ª–µ–≥–∞–º',
      '–ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ',
      '–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã'
    ]
  },
  {
    id: '3',
    text: '–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –æ—Ç 1 –¥–æ 10',
    type: 'scale',
  },
  {
    id: '4',
    text: '–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ?',
    type: 'text',
  },
  {
    id: '5',
    text: '–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?',
    type: 'choice',
    options: [
      '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å',
      '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', 
      '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
      '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü',
      '–†–µ–¥–∫–æ'
    ]
  }
];

class HRBotMockAPI {
  private currentQuestionIndex = 0;
  private sessionToken = '';

  // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
  private delay(ms: number = 1000): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
  async createSession(): Promise<SessionResponse> {
    await this.delay(800);
    
    this.sessionToken = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    this.currentQuestionIndex = 0;
    
    return {
      token: this.sessionToken,
      created_at: new Date().toISOString(),
      status: 'active'
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
  async getSession(token: string): Promise<any> {
    await this.delay(300);
    
    return {
      token,
      status: 'active',
      questions_completed: this.currentQuestionIndex,
      total_questions: MOCK_QUESTIONS.length
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
  async getNextQuestion(token: string, data: any = {}): Promise<Question | null> {
    await this.delay(600);
    
    if (this.currentQuestionIndex >= MOCK_QUESTIONS.length) {
      return null; // –ù–µ—Ç –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    }
    
    const question = MOCK_QUESTIONS[this.currentQuestionIndex];
    return { ...question };
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
  async submitAnswer(token: string, answer: any): Promise<any> {
    await this.delay(500);
    
    this.currentQuestionIndex++;
    
    console.log('üìù Mock answer submitted:', {
      token: token.substring(0, 12) + '...',
      question_id: answer.question_id,
      answer: answer.answer,
      progress: `${this.currentQuestionIndex}/${MOCK_QUESTIONS.length}`
    });
    
    return {
      success: true,
      question_id: answer.question_id,
      saved_at: new Date().toISOString()
    };
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
  async completeSession(token: string): Promise<any> {
    await this.delay(800);
    
    console.log('‚úÖ Mock session completed:', {
      token: token.substring(0, 12) + '...',
      questions_answered: this.currentQuestionIndex,
      completion_time: new Date().toISOString()
    });
    
    return {
      success: true,
      session_id: token,
      questions_answered: this.currentQuestionIndex,
      completed_at: new Date().toISOString()
    };
  }

  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∏—Ñ
  async generateGlyph(token: string, data: any = {}): Promise<GlyphResponse> {
    await this.delay(1500); // –ë–æ–ª–µ–µ –¥–æ–ª–≥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const glyphUrls = [
      'https://via.placeholder.com/300x300/6366f1/ffffff?text=Glyph+A',
      'https://via.placeholder.com/300x300/8b5cf6/ffffff?text=Glyph+B', 
      'https://via.placeholder.com/300x300/06b6d4/ffffff?text=Glyph+C',
      'https://via.placeholder.com/300x300/10b981/ffffff?text=Glyph+D',
      'https://via.placeholder.com/300x300/f59e0b/ffffff?text=Glyph+E',
    ];
    
    const randomGlyph = glyphUrls[Math.floor(Math.random() * glyphUrls.length)];
    
    console.log('üé® Mock glyph generated:', {
      token: token.substring(0, 12) + '...',
      glyph_url: randomGlyph
    });
    
    return {
      glyph_url: randomGlyph,
      generated_at: new Date().toISOString(),
      style: 'mock_style',
      colors: ['#6366f1', '#8b5cf6', '#06b6d4']
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  async getResult(token: string): Promise<any> {
    await this.delay(400);
    
    return {
      session_id: token,
      score: Math.floor(Math.random() * 40) + 60, // 60-100
      category: 'Mock Category',
      traits: ['Creative', 'Analytical', 'Team Player'],
      recommendations: 'Mock recommendations for development'
    };
  }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
const USE_MOCK_API = !import.meta.env.VITE_API_URL || import.meta.env.VITE_USE_MOCK_API === 'true';

export const hrBotMockAPI = new HRBotMockAPI();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –º–æ–∫
export const isMockMode = USE_MOCK_API; 