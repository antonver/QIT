// API —Å–µ—Ä–≤–∏—Å –¥–ª—è HRBot
const API_BASE_URL = 'https://aeon-hr-fixed-backend-540e49434c71.herokuapp.com';

export interface SessionResponse {
  token: string;
  [key: string]: any;
}

export interface Question {
  id: string;
  text: string;
  type: 'text' | 'choice' | 'scale' | 'technical';
  options?: string[];
  [key: string]: any;
}

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API
export interface ApiQuestionResponse {
  questions: Question[];
  total_questions: number;
  remaining_questions: number;
  completed?: boolean;
}

export interface Answer {
  question_id?: string;
  answer: string | number;
  time_spent?: number; // –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  [key: string]: any;
}

export interface AnswerResponse {
  success: boolean;
  time_spent?: number;
  question_number?: number;
  [key: string]: any;
}

export interface GlyphResponse {
  glyph: string;
  profile: string;
  svg?: string;
  [key: string]: any;
}

export interface ResultResponse {
  session_id: string;
  total_time: number;
  questions_answered: number;
  completion_rate: number;
  [key: string]: any;
}

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è –≥–ª–∏—Ñ–∞
export interface ApiGlyphResponse {
  glyph: string;
  profile: string;
  [key: string]: any;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
interface SessionState {
  token: string;
  questionIndex: number;
  askedQuestions: Set<string>;
  answers: { [key: string]: string };
  totalQuestions: number;
  lastQuestionId?: string; // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π
const sessionStates = new Map<string, SessionState>();

class HRBotAPI {
  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {
    const url = `${API_BASE_URL}${endpoint}`;
    
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      ...options,
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }

    return response.json();
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é - POST /session
  async createSession(): Promise<SessionResponse> {
    const response = await this.request<SessionResponse>('/session', {
      method: 'POST',
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    sessionStates.set(response.token, {
      token: response.token,
      questionIndex: 0,
      askedQuestions: new Set(),
      answers: {},
      totalQuestions: 10
    });
    
    return response;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ - GET /session/{token}
  async getSession(token: string): Promise<any> {
    return this.request(`/session/${token}`, {
      method: 'GET',
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å - POST /aeon/question/{token}
  async getNextQuestion(token: string, data: any = {}): Promise<Question[]> {
    const sessionState = sessionStates.get(token);
    
    if (!sessionState) {
      throw new Error('Session not found');
    }
    
    try {
      console.log(`üì§ API: Requesting questions for token ${token}`);
      
      const response = await this.request<ApiQuestionResponse>(`/aeon/question/${token}`, {
        method: 'POST',
        body: JSON.stringify(data),
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
      if (response && response.completed) {
        console.log('üéØ API: Test completed, no more questions');
        return [];
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç API –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      if (response && response.questions) {
        const questions = response.questions.map((q, index) => ({
          id: q.id || `q_${sessionState.questionIndex + index + 1}`,
          text: q.text,
          type: 'text' // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        sessionState.questionIndex += questions.length;
        console.log(`‚úÖ API: Received ${questions.length} questions`);
        
        return questions;
      }
      
      console.log(`‚ùå API: No questions received from API`);
      return [];
    } catch (error) {
      console.error('API: Error getting questions:', error);
      return [];
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç - POST /session/{token}/answer
  async submitAnswer(token: string, answer: Answer): Promise<AnswerResponse> {
    const sessionState = sessionStates.get(token);
    
    if (sessionState && answer.question_id) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
      sessionState.answers[answer.question_id] = answer.answer.toString();
      
      console.log(`üìù API: Answer saved for question ${answer.question_id}, current index: ${sessionState.questionIndex}`);
      console.log(`‚úÖ API: Answer submitted for question ${answer.question_id}`);
    }
    
    return this.request<AnswerResponse>(`/session/${token}/answer`, {
      method: 'POST',
      body: JSON.stringify(answer),
    });
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é - POST /session/{token}/complete
  async completeSession(token: string): Promise<any> {
    const response = await this.request(`/session/${token}/complete`, {
      method: 'POST',
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    sessionStates.delete(token);
    
    return response;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç - GET /result/{token}
  async getResult(token: string): Promise<ResultResponse> {
    return this.request<ResultResponse>(`/result/${token}`, {
      method: 'GET',
    });
  }

  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∏—Ñ - POST /aeon/glyph/{token}
  async generateGlyph(token: string, data: any = {}): Promise<GlyphResponse> {
    const response = await this.request<ApiGlyphResponse>(`/aeon/glyph/${token}`, {
      method: 'POST',
      body: JSON.stringify(data),
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç API –∫–∞–∫ –µ—Å—Ç—å
    return {
      glyph: response.glyph,
      profile: response.profile
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É/–ø—Ä–æ—Ñ–∏–ª—å - POST /aeon/summary/{token}
  async getSummary(token: string): Promise<{ summary: string }> {
    const response = await this.request<{ summary: string }>(`/aeon/summary/${token}`, {
      method: 'POST',
    });
    
    return response;
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
const USE_MOCK = false; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API

// –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π API, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ mock –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
export const hrBotAPI = USE_MOCK ? createMockAPI() : createHybridAPI();

// –ì–∏–±—Ä–∏–¥–Ω—ã–π API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ mock
function createHybridAPI() {
  const realAPI = new HRBotAPI();
  const mockAPI = createMockAPI();
  
  return {
    async createSession(): Promise<SessionResponse> {
      try {
        console.log('üåê Trying real API for session creation...');
        const result = await realAPI.createSession();
        console.log('‚úÖ Real API session created:', result.token);
        return result;
      } catch (error) {
        console.warn('‚ùå Real API failed, using mock:', error);
        const mockResult = await mockAPI.createSession();
        console.log('‚úÖ Mock API session created:', mockResult.token);
        return mockResult;
      }
    },
    
    async getNextQuestion(token: string, data: any = {}): Promise<Question[]> {
      if (token.startsWith('mock_')) {
        console.log('üîÑ Using mock API for getNextQuestion');
        return mockAPI.getNextQuestion(token, data);
      }
      
      try {
        console.log('üåê Trying real API for getNextQuestion...');
        const result = await realAPI.getNextQuestion(token, data);
        console.log('‚úÖ Real API question received');
        return result;
      } catch (error) {
        console.warn('‚ùå Real API failed for getNextQuestion, using mock:', error);
        return mockAPI.getNextQuestion(token, data);
      }
    },
    
    async submitAnswer(token: string, answer: Answer): Promise<AnswerResponse> {
      if (token.startsWith('mock_')) return mockAPI.submitAnswer(token, answer);
      
      try {
        const result = await realAPI.submitAnswer(token, answer);
        return result;
      } catch (error) {
        console.warn('Real API failed, using mock:', error);
        return mockAPI.submitAnswer(token, answer);
      }
    },
    
    async completeSession(token: string): Promise<any> {
      if (token.startsWith('mock_')) return mockAPI.completeSession(token);
      
      try {
        return await realAPI.completeSession(token);
      } catch (error) {
        console.warn('Real API failed, using mock:', error);
        return mockAPI.completeSession(token);
      }
    },

    async getResult(token: string): Promise<ResultResponse> {
      if (token.startsWith('mock_')) return mockAPI.getResult(token);
      
      try {
        return await realAPI.getResult(token);
      } catch (error) {
        console.warn('Real API failed, using mock:', error);
        return mockAPI.getResult(token);
      }
    },
    
    async generateGlyph(token: string, data: any = {}): Promise<GlyphResponse> {
      if (token.startsWith('mock_')) return mockAPI.generateGlyph(token);
      
      try {
        const result = await realAPI.generateGlyph(token, data);
        return result;
      } catch (error) {
        console.warn('Real API failed, using mock:', error);
        return mockAPI.generateGlyph(token);
      }
    },
    
    async getSummary(token: string): Promise<{ summary: string }> {
      if (token.startsWith('mock_')) return mockAPI.getSummary(token);
      
      try {
        const result = await realAPI.getSummary(token);
        return result;
      } catch (error) {
        console.warn('Real API failed, using mock:', error);
        return mockAPI.getSummary(token);
      }
    },
    
    async getSession(token: string): Promise<any> {
      if (token.startsWith('mock_')) return mockAPI.getSession(token);
      
      try {
        return await realAPI.getSession(token);
      } catch (error) {
        console.warn('Real API failed, using mock:', error);
        return mockAPI.getSession(token);
      }
    },
    
    async cleanupSession(token: string): Promise<void> {
      if (token.startsWith('mock_')) return mockAPI.cleanupSession(token);
      
      // –†–µ–∞–ª—å–Ω—ã–π API –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—á–∏—Å—Ç–∫–∏ (—Å–µ—Ä–≤–µ—Ä —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é)
      console.log(`üßπ Real API: Session cleanup not required for ${token}`);
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫ API
function createMockAPI() {
  // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é)
  const MOCK_QUESTIONS: Question[] = [
    {
      id: 'q_1',
      text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ. –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–º–∏?',
      type: 'text',
    },
    {
      id: 'q_2', 
      text: '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –ß—Ç–æ –±—ã –≤—ã –¥–µ–ª–∞–ª–∏ –∏ –∫–∞–∫ –±—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏?',
      type: 'text',
    },
    {
      id: 'q_3',
      text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É. –ö–∞–∫ –≤—ã –ø–æ–¥–æ—à–ª–∏ –∫ —Ä–µ—à–µ–Ω–∏—é?',
      type: 'text',
    },
    {
      id: 'q_4',
      text: '–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –¥–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞ —Ä–∞–±–æ—Ç–µ? –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä.',
      type: 'text',
    },
    {
      id: 'q_5',
      text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ. –ö–∞–∫—É—é —Ä–æ–ª—å –≤—ã –æ–±—ã—á–Ω–æ –∏–≥—Ä–∞–µ—Ç–µ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ?',
      type: 'text',
    },
    {
      id: 'q_6',
      text: '–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –º–µ—Ç–æ–¥—ã –∏–ª–∏ –Ω–∞–≤—ã–∫–∏ –≤—ã –∏–∑—É—á–∏–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥? –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–∑—É—á–∏—Ç—å?',
      type: 'text',
    },
    {
      id: 'q_7',
      text: '–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–µ—Ä—å–µ–∑–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º. –ö–∞–∫ –≤—ã —ç—Ç–æ –¥–µ–ª–∞–ª–∏?',
      type: 'text',
    },
    {
      id: 'q_8',
      text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª—è—Ö. –ì–¥–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 2-3 –≥–æ–¥–∞?',
      type: 'text',
    },
    {
      id: 'q_9',
      text: '–ß—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –ß—Ç–æ –¥–∞–µ—Ç –≤–∞–º —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?',
      type: 'text',
    },
    {
      id: 'q_10',
      text: '–ü–æ—á–µ–º—É –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏? –ö–∞–∫–æ–π –≤–∫–ª–∞–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?',
      type: 'text',
    }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
  const mockSessionStates = new Map<string, {
    currentQuestionIndex: number;
    sessionStartTime: number;
    questionStartTime: number;
    totalTimeSpent: number;
    answers: { [key: string]: string };
    askedQuestions: Set<string>; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  }>();

  const delay = (ms: number = 1000): Promise<void> => {
    return new Promise(resolve => setTimeout(resolve, ms));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è fallback —Å–µ—Å—Å–∏–∏
  const createFallbackSession = (token: string) => {
    const sessionState = {
      currentQuestionIndex: 0,
      sessionStartTime: Date.now(),
      questionStartTime: Date.now(),
      totalTimeSpent: 0,
      answers: {},
      askedQuestions: new Set<string>()
    };
    mockSessionStates.set(token, sessionState);
    return sessionState;
  };

  return {
    // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
    async createSession(): Promise<SessionResponse> {
      await delay(800);
      const token = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      mockSessionStates.set(token, {
        currentQuestionIndex: 0,
        sessionStartTime: Date.now(),
        questionStartTime: Date.now(),
        totalTimeSpent: 0,
        answers: {},
        askedQuestions: new Set<string>()
      });
      
      return {
        token,
        created_at: new Date().toISOString(),
        status: 'active'
      };
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    async getNextQuestion(token: string, _data: any = {}): Promise<Question[]> {
      await delay(600);
      
      let sessionState = mockSessionStates.get(token);
      if (!sessionState) {
        console.warn(`‚ö†Ô∏è Mock: Session ${token} not found, creating fallback session`);
        sessionState = createFallbackSession(token);
      }
      
      console.log(`üìã Mock: Getting question with index ${sessionState.currentQuestionIndex}, total questions: ${MOCK_QUESTIONS.length}`);
      console.log(`üìã Mock: Already asked questions:`, Array.from(sessionState.askedQuestions));
      
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–¥–∞–µ–º —Ä–æ–≤–Ω–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
      if (sessionState.currentQuestionIndex >= 10) {
        console.log(`üîö Mock: Reached question limit: ${sessionState.currentQuestionIndex}/10`);
        return [];
      }
      
      // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
      let questionIndex = sessionState.currentQuestionIndex;
      while (questionIndex < MOCK_QUESTIONS.length && questionIndex < 10) {
        const question = MOCK_QUESTIONS[questionIndex];
        
        if (!sessionState.askedQuestions.has(question.id)) {
          // –ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
          sessionState.askedQuestions.add(question.id);
          sessionState.questionStartTime = Date.now();
          sessionState.currentQuestionIndex = questionIndex + 1;
          
          console.log(`‚úÖ Mock: Question ${question.id} prepared (index ${questionIndex + 1}/10):`, question.text.substring(0, 50) + '...');
          
          return [question];
        }
        
        console.warn(`‚ö†Ô∏è Mock: Question ${question.id} already asked, trying next`);
        questionIndex++;
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–æ –º—ã –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 10
      if (sessionState.currentQuestionIndex < 10) {
        console.log(`üîÑ Mock: Reusing questions to reach 10 total`);
        // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ —Å –Ω–æ–≤—ã–º–∏ ID
        const reusedQuestion = MOCK_QUESTIONS[sessionState.currentQuestionIndex % MOCK_QUESTIONS.length];
        const newQuestionId = `q_reused_${sessionState.currentQuestionIndex + 1}`;
        
        sessionState.askedQuestions.add(newQuestionId);
        sessionState.questionStartTime = Date.now();
        sessionState.currentQuestionIndex++;
        
        console.log(`‚úÖ Mock: Reused question prepared (${sessionState.currentQuestionIndex}/10):`, reusedQuestion.text.substring(0, 50) + '...');
        
        return [reusedQuestion];
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
      console.log(`üîö Mock: No more unasked questions available`);
      return [];
    },

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
    async submitAnswer(token: string, answer: Answer): Promise<AnswerResponse> {
      await delay(500);
      
      let sessionState = mockSessionStates.get(token);
      if (!sessionState) {
        console.warn(`‚ö†Ô∏è Mock: Session ${token} not found for submitAnswer, creating fallback session`);
        sessionState = createFallbackSession(token);
      }
      
      const timeSpent = Math.floor((Date.now() - sessionState.questionStartTime) / 1000);
      sessionState.totalTimeSpent += timeSpent;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      if (answer.question_id) {
        sessionState.answers[answer.question_id] = answer.answer.toString();
        console.log(`üíæ Mock: Answer saved for question ${answer.question_id}: "${answer.answer}" (length: ${answer.answer.toString().length})`);
      } else {
        console.warn(`‚ö†Ô∏è Mock: No question_id provided for answer:`, answer);
      }
      
      console.log(`‚úÖ Mock: Answer submitted, moving to question ${sessionState.currentQuestionIndex + 1}`);
      console.log(`üìä Mock: Total answers saved so far:`, Object.keys(sessionState.answers).length);
      
      return {
        success: true,
        time_spent: timeSpent,
        question_number: sessionState.currentQuestionIndex,
        saved_at: new Date().toISOString()
      };
    },

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
    async completeSession(token: string): Promise<any> {
      await delay(800);
      
      let sessionState = mockSessionStates.get(token);
      if (!sessionState) {
        console.warn(`‚ö†Ô∏è Mock: Session ${token} not found for completeSession, creating fallback session`);
        sessionState = createFallbackSession(token);
      }
      
      const actualAnswersCount = Object.keys(sessionState.answers).length;
      console.log(`üìä Mock: completeSession - found ${actualAnswersCount} answers`);
      
      const result = {
        success: true,
        session_id: token,
        questions_answered: actualAnswersCount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
        total_time: sessionState.totalTimeSpent,
        completed_at: new Date().toISOString()
      };
      
      return result;
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    async getResult(token: string): Promise<ResultResponse> {
      await delay(400);
      
      let sessionState = mockSessionStates.get(token);
      if (!sessionState) {
        console.warn(`‚ö†Ô∏è Mock: Session ${token} not found for getResult, creating fallback session`);
        sessionState = createFallbackSession(token);
      }
      
      const actualAnswersCount = Object.keys(sessionState.answers).length;
      console.log(`üìä Mock: getResult - currentQuestionIndex: ${sessionState.currentQuestionIndex}, actual answers: ${actualAnswersCount}`);
      
      return {
        session_id: token,
        total_time: sessionState.totalTimeSpent,
        questions_answered: actualAnswersCount, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
        completion_rate: (actualAnswersCount / 10) * 100,
        average_time_per_question: Math.floor(sessionState.totalTimeSpent / (actualAnswersCount || 1)),
        performance_score: Math.floor(Math.random() * 40) + 60,
        created_at: new Date(sessionState.sessionStartTime).toISOString(),
        completed_at: new Date().toISOString()
      };
    },

    // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∏—Ñ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    async generateGlyph(token: string): Promise<GlyphResponse> {
      await delay(1500);
      
      let sessionState = mockSessionStates.get(token);
      if (!sessionState) {
        console.warn(`‚ö†Ô∏è Mock: Session ${token} not found for generateGlyph, creating fallback session`);
        sessionState = createFallbackSession(token);
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
      const answers = Object.values(sessionState.answers);
      console.log(`üìä Mock: Glyph analysis - found ${answers.length} answers:`, answers);
      
      if (answers.length === 0) {
        return {
          glyph: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          profile: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é.'
        };
      }
      
      const avgAnswerLength = answers.reduce((sum, answer) => sum + answer.length, 0) / answers.length;
      
      // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
      const veryDetailedAnswers = answers.filter(answer => answer.length > 100).length; // –û—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ (100+ —Å–∏–º–≤–æ–ª–æ–≤)
      const detailedAnswers = answers.filter(answer => answer.length > 50).length; // –ü–æ–¥—Ä–æ–±–Ω—ã–µ (50+ —Å–∏–º–≤–æ–ª–æ–≤)
      const basicAnswers = answers.filter(answer => answer.length >= 20 && answer.length <= 50).length; // –ë–∞–∑–æ–≤—ã–µ (20-50 —Å–∏–º–≤–æ–ª–æ–≤)
      const shortAnswers = answers.filter(answer => answer.length < 20).length; // –ö–æ—Ä–æ—Ç–∫–∏–µ (–º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
      
      const veryDetailedPercentage = answers.length > 0 ? (veryDetailedAnswers / answers.length) * 100 : 0;
      const detailedPercentage = answers.length > 0 ? (detailedAnswers / answers.length) * 100 : 0;
      const shortPercentage = answers.length > 0 ? (shortAnswers / answers.length) * 100 : 0;
      
      let glyph = '';
      let profile = '';
      
      // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ 50%), –¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É
      if (shortPercentage > 50 || avgAnswerLength < 15) {
        glyph = '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –î–æ—Ä–∞–±–æ—Ç–∫–∞';
        profile = `–ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (—Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: ${Math.round(avgAnswerLength)} —Å–∏–º–≤–æ–ª–æ–≤). ${shortAnswers} –∏–∑ ${answers.length} –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é, –Ω–µ–∂–µ–ª–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏.`;
      }
      // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (30-50%), –¥–∞–µ–º —É–º–µ—Ä–µ–Ω–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É
      else if (shortPercentage > 30 || avgAnswerLength < 30) {
        glyph = 'üîç –ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –†–∞–∑–≤–∏—Ç–∏–∏';
        profile = `–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–∫–∞–∑–∞–ª –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (—Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: ${Math.round(avgAnswerLength)} —Å–∏–º–≤–æ–ª–æ–≤). ${shortAnswers} –∏–∑ ${answers.length} –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–º–∏. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ú–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è junior –ø–æ–∑–∏—Ü–∏–π —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥–æ–º.`;
      }
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      else if (veryDetailedPercentage >= 60) {
        glyph = 'üéØ –õ–∏–¥–µ—Ä-–ê–Ω–∞–ª–∏—Ç–∏–∫';
        profile = `–ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É –º—ã—à–ª–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: ${Math.round(avgAnswerLength)} —Å–∏–º–≤–æ–ª–æ–≤. ${veryDetailedAnswers} –∏–∑ ${answers.length} –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–∏ –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ª–∏–¥–µ—Ä—Å—Ç–≤—É. –û—Ç–ª–∏—á–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –º—ã—Å–ª–∏ –∏ –º–æ–∂–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è.`;
      }
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      else if (detailedPercentage >= 50) {
        glyph = '‚ö° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª-–†–æ—Å—Ç';
        profile = `–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–∫–∞–∑–∞–ª —Ö–æ—Ä–æ—à–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è. –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: ${Math.round(avgAnswerLength)} —Å–∏–º–≤–æ–ª–æ–≤. ${detailedAnswers} –∏–∑ ${answers.length} –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏. –ú–æ–∂–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏ –±—Ä–∞—Ç—å –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.`;
      }
      // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
      else {
        glyph = 'üöÄ –°—Ç–∞—Ä—Ç–µ—Ä-–≠–Ω—Ç—É–∑–∏–∞—Å—Ç';
        profile = `–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–∫–∞–∑–∞–ª —É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (—Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: ${Math.round(avgAnswerLength)} —Å–∏–º–≤–æ–ª–æ–≤). ${basicAnswers} –∏–∑ ${answers.length} –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–∏ –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫ —Ä–∞–±–æ—Ç–µ, –Ω–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–º–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–µ.`;
      }
      
      return { glyph, profile };
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    async getSummary(token: string): Promise<{ summary: string }> {
      await delay(1200);
      
      let sessionState = mockSessionStates.get(token);
      if (!sessionState) {
        console.warn(`‚ö†Ô∏è Mock: Session ${token} not found for getSummary, creating fallback session`);
        sessionState = createFallbackSession(token);
      }
      
      const answers = Object.values(sessionState.answers);
      const totalAnswers = answers.length;
      
      console.log(`üìä Mock: Summary analysis - found ${totalAnswers} answers:`, answers);
      console.log(`üìä Mock: Session state:`, {
        currentQuestionIndex: sessionState.currentQuestionIndex,
        askedQuestions: Array.from(sessionState.askedQuestions),
        totalTimeSpent: sessionState.totalTimeSpent
      });
      
      if (totalAnswers === 0) {
        return {
          summary: `üìä **–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω**

**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:**
–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é.

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã`
        };
      }
      
      const avgAnswerLength = answers.reduce((sum, answer) => sum + answer.length, 0) / answers.length;
      
      const detailedAnswers = answers.filter(answer => answer.length > 50).length;
      const shortAnswers = answers.filter(answer => answer.length < 20).length;
      
      // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è summary
      const veryShortAnswers = answers.filter(answer => answer.length < 10).length;
      
      const shortPercentage = totalAnswers > 0 ? (shortAnswers / totalAnswers) * 100 : 0;
      
      let qualityAssessment = '';
      let recommendations = '';
      
      if (veryShortAnswers > totalAnswers * 0.3 || avgAnswerLength < 10) {
        qualityAssessment = '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å–µ—Ä—å–µ–∑–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é';
        recommendations = `‚Ä¢ –ö–∞–Ω–¥–∏–¥–∞—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –∏–Ω—Ç–µ—Ä–≤—å—é
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Å—Ç–æ–ª—å –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤`;
      } else if (shortPercentage > 50 || avgAnswerLength < 20) {
        qualityAssessment = '‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏';
        recommendations = `‚Ä¢ –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ª–æ–≤–Ω–æ –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω–æ–º—É –ø–æ–¥—Ö–æ–¥—É`;
      } else if (shortPercentage > 30 || avgAnswerLength < 40) {
        qualityAssessment = 'üîç –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –æ—Ç–≤–µ—Ç—ã –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é';
        recommendations = `‚Ä¢ –ö–∞–Ω–¥–∏–¥–∞—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Å –æ–≥–æ–≤–æ—Ä–∫–∞–º–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
‚Ä¢ –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏`;
      } else if (detailedAnswers >= 7) {
        qualityAssessment = '‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–æ–¥—Ä–æ–±–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤';
        recommendations = `‚Ä¢ –ö–∞–Ω–¥–∏–¥–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –∏–Ω—Ç–µ—Ä–≤—å—é
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ hard skills
‚Ä¢ –ü–æ–∫–∞–∑–∞–ª –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏`;
      } else {
        qualityAssessment = '‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–∞–ª —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å';
        recommendations = `‚Ä¢ –ö–∞–Ω–¥–∏–¥–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –∏–Ω—Ç–µ—Ä–≤—å—é
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ hard skills
‚Ä¢ –ü–æ–∫–∞–∑–∞–ª —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤`;
      }

      const summary = `üìä **–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω**

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é:**
‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ –Ω–∞ ${totalAnswers} –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgAnswerLength)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (50+ —Å–∏–º–≤–æ–ª–æ–≤): ${detailedAnswers} (${Math.round((detailedAnswers / totalAnswers) * 100)}%)
‚Ä¢ –ö—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤): ${shortAnswers} (${Math.round((shortAnswers / totalAnswers) * 100)}%)
‚Ä¢ –û—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): ${veryShortAnswers} (${Math.round((veryShortAnswers / totalAnswers) * 100)}%)
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round(sessionState.totalTimeSpent / 60)} –º–∏–Ω—É—Ç

**–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤:**
${qualityAssessment}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
${recommendations}`;

      return { summary };
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    async getSession(token: string): Promise<any> {
      await delay(300);
      
      let sessionState = mockSessionStates.get(token);
      if (!sessionState) {
        console.warn(`‚ö†Ô∏è Mock: Session ${token} not found for getSession, creating fallback session`);
        sessionState = createFallbackSession(token);
      }
      
      return {
        token,
        status: 'active',
        questions_completed: sessionState.currentQuestionIndex,
        total_questions: 10,
        total_time: sessionState.totalTimeSpent
      };
    },
    
    // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏)
    async cleanupSession(token: string): Promise<void> {
      if (mockSessionStates.has(token)) {
        mockSessionStates.delete(token);
        console.log(`üßπ Mock: Session ${token} cleaned up`);
      }
    }
  };
}

if (!USE_MOCK) {
  console.log(`üåê HRBot: Using Real API at ${API_BASE_URL}`);
} 