// API —Å–µ—Ä–≤–∏—Å –¥–ª—è HRBot
const API_BASE_URL = 'https://aeon-backend-2892-d50dfbe26b14.herokuapp.com';

export interface SessionResponse {
  token: string;
  [key: string]: any;
}

export interface Question {
  id: string;
  text: string;
  type: 'text' | 'choice' | 'scale' | 'technical';
  options?: string[];
  [key: string]: any;
}

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API
export interface ApiQuestionResponse {
  question?: string;
  questions?: {
    id: string;
    text: string;
    type: 'text' | 'choice' | 'scale' | 'technical';
    options?: string[];
  }[];
  total_questions?: number;
  remaining_questions?: number;
  completed?: boolean;
}

export interface Answer {
  question_id?: string;
  answer: string | number;
  time_spent?: number; // –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  [key: string]: any;
}

export interface AnswerResponse {
  success: boolean;
  time_spent?: number;
  question_number?: number;
  [key: string]: any;
}

export interface GlyphResponse {
  glyph: string;
  profile: string;
  svg?: string;
  [key: string]: any;
}

export interface ResultResponse {
  session_id: string;
  total_time: number;
  questions_answered: number;
  completion_rate: number;
  [key: string]: any;
}

// –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è –≥–ª–∏—Ñ–∞
export interface ApiGlyphResponse {
  glyph: string;
  profile: string;
  [key: string]: any;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
interface SessionState {
  token: string;
  questionIndex: number;
  askedQuestions: Set<string>;
  answers: { [key: string]: string };
  totalQuestions: number;
  lastQuestionId?: string; // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π
const sessionStates = new Map<string, SessionState>();

class HRBotAPI {
  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {
    const url = `${API_BASE_URL}${endpoint}`;
    
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      ...options,
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }

    return response.json();
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é - POST /session
  async createSession(): Promise<SessionResponse> {
    const response = await this.request<SessionResponse>('/session', {
      method: 'POST',
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    sessionStates.set(response.token, {
      token: response.token,
      questionIndex: 0,
      askedQuestions: new Set(),
      answers: {},
      totalQuestions: 10
    });
    
    return response;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ - GET /session/{token}
  async getSession(token: string): Promise<any> {
    return this.request(`/session/${token}`, {
      method: 'GET',
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å - POST /aeon/question/{token}
  async getNextQuestion(token: string, data: any = {}): Promise<Question[]> {
    const sessionState = sessionStates.get(token);
    
    if (!sessionState) {
      throw new Error('Session not found');
    }
    
    try {
      console.log(`üì§ API: Requesting questions for token ${token}`);
      
      const response = await this.request<ApiQuestionResponse>(`/aeon/question/${token}`, {
        method: 'POST',
        body: JSON.stringify(data),
      });
      
      console.log('üì• API: Received response:', response);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
      if (response && response.completed) {
        console.log('üéØ API: Test completed, no more questions');
        return [];
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
      if (response && response.question) {
        const question: Question = {
          id: `q_${sessionState.questionIndex + 1}`,
          text: response.question,
          type: 'text'
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        sessionState.questionIndex += 1;
        console.log(`‚úÖ API: Received single question`);
        
        return [question];
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤)
      if (response && response.questions) {
        const questions: Question[] = response.questions.map((q, index) => ({
          id: q.id || `q_${sessionState.questionIndex + index + 1}`,
          text: q.text,
          type: q.type || 'text'
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        sessionState.questionIndex += questions.length;
        console.log(`‚úÖ API: Received ${questions.length} questions`);
        
        return questions;
      }
      
      console.log(`‚ùå API: No questions received from API`);
      return [];
    } catch (error) {
      console.error('API: Error getting questions:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç - POST /session/{token}/answer
  async submitAnswer(token: string, answer: Answer): Promise<AnswerResponse> {
    const sessionState = sessionStates.get(token);
    
    if (sessionState && answer.question_id) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
      sessionState.answers[answer.question_id] = answer.answer.toString();
      
      console.log(`üìù API: Answer saved for question ${answer.question_id}, current index: ${sessionState.questionIndex}`);
      console.log(`‚úÖ API: Answer submitted for question ${answer.question_id}`);
    }
    
    return this.request<AnswerResponse>(`/session/${token}/answer`, {
      method: 'POST',
      body: JSON.stringify(answer),
    });
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é - POST /session/{token}/complete
  async completeSession(token: string): Promise<any> {
    const response = await this.request(`/session/${token}/complete`, {
      method: 'POST',
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    sessionStates.delete(token);
    
    return response;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç - GET /result/{token}
  async getResult(token: string): Promise<ResultResponse> {
    return this.request<ResultResponse>(`/result/${token}`, {
      method: 'GET',
    });
  }

  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∏—Ñ - POST /aeon/glyph/{token}
  async generateGlyph(token: string, data: any = {}): Promise<GlyphResponse> {
    const response = await this.request<ApiGlyphResponse>(`/aeon/glyph/${token}`, {
      method: 'POST',
      body: JSON.stringify(data),
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç API –∫–∞–∫ –µ—Å—Ç—å
    return {
      glyph: response.glyph,
      profile: response.profile
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É/–ø—Ä–æ—Ñ–∏–ª—å - POST /aeon/summary/{token}
  async getSummary(token: string): Promise<{ summary: string }> {
    const response = await this.request<{ summary: string }>(`/aeon/summary/${token}`, {
      method: 'POST',
    });
    
    return response;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é - DELETE /session/{token}
  async cleanupSession(token: string): Promise<void> {
    try {
      await this.request(`/session/${token}`, {
        method: 'DELETE',
      });
    } catch (error) {
      console.warn('Failed to cleanup session on server:', error);
    } finally {
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      sessionStates.delete(token);
    }
  }
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π API
export const hrBotAPI = new HRBotAPI();



// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫ API
// (—É–¥–∞–ª–µ–Ω–æ, –º–æ–∫-—Ä–µ–∂–∏–º –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è) 