// Utility functions for Telegram WebApp
export const initTelegramWebApp = (): boolean => {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  cleanupOldAuthData();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    try {
      const webApp = window.Telegram.WebApp;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
      webApp.ready();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
      webApp.expand();
      webApp.setHeaderColor('#232b3b');
      webApp.setBackgroundColor('#232b3b');
      
      // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      webApp.enableClosingConfirmation();
      
      console.log('Telegram WebApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('WebApp version:', webApp.version);
      console.log('WebApp platform:', webApp.platform);
      console.log('WebApp theme:', webApp.colorScheme);
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
      return false;
    }
  }
  
  console.log('Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω');
  return false;
};

export const getTelegramUser = () => {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user) {
    return window.Telegram.WebApp.initDataUnsafe.user;
  }
  return null;
};

// Debug function to analyze Telegram WebApp data
export const debugTelegramWebApp = () => {
  console.log('=== Telegram WebApp Debug Info ===');
  
  if (typeof window === 'undefined') {
    console.log('‚ùå Window object not available');
    return;
  }
  
  console.log('üîç Telegram object:', window.Telegram ? '‚úÖ Available' : '‚ùå Not available');
  
  if (window.Telegram?.WebApp) {
    const webApp = window.Telegram.WebApp;
    console.log('üîç WebApp object:', '‚úÖ Available');
    console.log('üîç WebApp version:', webApp.version);
    console.log('üîç WebApp platform:', webApp.platform);
    console.log('üîç WebApp colorScheme:', webApp.colorScheme);
    console.log('üîç WebApp isExpanded:', webApp.isExpanded);
    console.log('üîç WebApp viewportHeight:', webApp.viewportHeight);
    console.log('üîç WebApp viewportStableHeight:', webApp.viewportStableHeight);
    
    console.log('üîç InitData:', webApp.initData ? `‚úÖ Available (${webApp.initData.length} chars)` : '‚ùå Not available');
    console.log('üîç InitDataUnsafe:', webApp.initDataUnsafe ? '‚úÖ Available' : '‚ùå Not available');
    
    if (webApp.initDataUnsafe) {
      console.log('üîç InitDataUnsafe.user:', webApp.initDataUnsafe.user ? '‚úÖ Available' : '‚ùå Not available');
      console.log('üîç InitDataUnsafe.query_id:', webApp.initDataUnsafe.query_id ? '‚úÖ Available' : '‚ùå Not available');
      console.log('üîç InitDataUnsafe.auth_date:', webApp.initDataUnsafe.auth_date ? '‚úÖ Available' : '‚ùå Not available');
      console.log('üîç InitDataUnsafe.hash:', webApp.initDataUnsafe.hash ? '‚úÖ Available' : '‚ùå Not available');
      
      if (webApp.initDataUnsafe.user) {
        console.log('üîç User data:', JSON.stringify(webApp.initDataUnsafe.user, null, 2));
      }
    }
  } else {
    console.log('‚ùå WebApp object not available');
  }
  
  console.log('==================================');
};

export const getTelegramInitData = (): string => {
  console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram...');
  
  // Debug information
  debugTelegramWebApp();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π Telegram WebApp
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    console.log('Telegram WebApp –Ω–∞–π–¥–µ–Ω');
    
    const initData = window.Telegram.WebApp.initData;
    console.log('Telegram initData:', initData ? '–Ω–∞–π–¥–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    if (initData) {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ initData');
      return initData;
    }
    
    // –ï—Å–ª–∏ initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å initDataUnsafe
    const initDataUnsafe = window.Telegram.WebApp.initDataUnsafe;
    console.log('Telegram initDataUnsafe:', initDataUnsafe);
    
    if (initDataUnsafe?.user) {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authDate = Math.floor(Date.now() / 1000);
      const userData = JSON.stringify(initDataUnsafe.user);
      const userParam = `user=${encodeURIComponent(userData)}`;
      const authParam = `auth_date=${authDate}`;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π hash –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      const dataToHash = `${userParam}&${authParam}`;
      const hash = btoa(dataToHash).replace(/[^a-zA-Z0-9]/g, '').substring(0, 32);
      
      const mockInitData = `${userParam}&${authParam}&hash=${hash}`;
      console.log('‚úÖ –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ initDataUnsafe');
      console.log('Generated auth data length:', mockInitData.length);
      return mockInitData;
    }
  }
  
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  // —á—Ç–æ–±—ã API –∑–Ω–∞–ª, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
  console.warn('‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –∏–∑ Telegram WebApp');
  console.warn('‚ùå –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  return '';
};

export const isTelegramWebApp = (): boolean => {
  return typeof window !== 'undefined' && Boolean(window.Telegram?.WebApp);
};

export const showTelegramAlert = (message: string, callback?: () => void) => {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    window.Telegram.WebApp.showAlert(message, callback);
  } else {
    alert(message);
    callback?.();
  }
};

export const showTelegramConfirm = (message: string, callback?: (confirmed: boolean) => void) => {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    window.Telegram.WebApp.showConfirm(message, callback);
  } else {
    const confirmed = confirm(message);
    callback?.(confirmed);
  }
};

export const closeTelegramWebApp = () => {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    window.Telegram.WebApp.close();
  }
};

// Function to clear and recreate auth data
export const clearAndRecreateAuthData = () => {
  console.log('üîÑ –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  if (typeof window !== 'undefined') {
    // Clear existing data
    localStorage.removeItem('telegram_init_data');
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    // Recreate auth data
    const newInitData = getTelegramInitData();
    console.log('‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:', newInitData ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞');
    
    return newInitData;
  }
  
  return '';
};

// Function to clean up old auth data on initialization
export const cleanupOldAuthData = () => {
  if (typeof window !== 'undefined') {
    // Remove old test data that might cause conflicts
    localStorage.removeItem('telegram_init_data');
    console.log('üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }
};

// Function to test auth data
export const testAuthData = () => {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  const initData = getTelegramInitData();
  
  if (initData) {
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('üìä –î–ª–∏–Ω–∞:', initData.length);
    console.log('üìã –ü—Ä–µ–≤—å—é:', initData.substring(0, 100) + '...');
    
    // Parse data to check structure
    try {
      const params = new URLSearchParams(initData);
      const user = params.get('user');
      const authDate = params.get('auth_date');
      const hash = params.get('hash');
      
      console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:');
      console.log('  - user:', user ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      console.log('  - auth_date:', authDate ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      console.log('  - hash:', hash ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      
      if (user) {
        const userData = JSON.parse(decodeURIComponent(user));
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  } else {
    console.error('‚ùå –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return false;
  }
};

// Function to diagnose server-side issues
export const diagnoseServerAuth = async () => {
  console.log('üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
  
  try {
    // Import debug functions dynamically to avoid circular dependencies
    const { debugAuthConfig, debugValidateTelegramData } = await import('../services/aeonMessengerApi');
    
    // Check server auth configuration
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
      const authConfig = await debugAuthConfig();
      console.log('üèÉ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', authConfig);
      
      if (!authConfig.telegram_bot_token_set) {
        console.error('‚ùå –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞!');
        console.error('üí° –†–µ—à–µ–Ω–∏–µ: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        return 'server_no_token';
      }
      
      console.log('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return 'server_config_error';
    }
    
    // Test validation with current data
    const initData = getTelegramInitData();
    if (initData) {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
      try {
        const validationResult = await debugValidateTelegramData(initData);
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validationResult);
        
        if (validationResult.success) {
          console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
          console.log('‚ùì –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ');
          return 'validation_success';
        } else {
          console.error('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –ø—Ä–æ—à–ª–∞');
          console.error('üí° –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–µ –¥–∞–Ω–Ω—ã–µ');
          return 'validation_failed';
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
        return 'validation_error';
      }
    } else {
      console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return 'no_data';
    }
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    return 'general_error';
  }
};

// Make functions available globally for debugging
if (typeof window !== 'undefined') {
  (window as any).telegramUtils = {
    debugTelegramWebApp,
    getTelegramInitData,
    clearAndRecreateAuthData,
    cleanupOldAuthData,
    testAuthData,
    initTelegramWebApp,
    diagnoseServerAuth,
  };
  
  console.log('üîß –£—Ç–∏–ª–∏—Ç—ã Telegram –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ window.telegramUtils');
} 