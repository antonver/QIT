import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Button,
  Stepper,
  Step,
  StepLabel,
  TextField,
  Chip,
  Alert,
  CircularProgress,
  Paper,
  Avatar,
  Divider,
  LinearProgress,
  IconButton,
  Tooltip
} from '@mui/material';
import {
  Work as WorkIcon,
  QuestionAnswer as QuestionIcon,
  Assessment as AssessmentIcon,
  EmojiEvents as TrophyIcon,
  Psychology as PsychologyIcon,
  TrendingUp as TrendingUpIcon,
  Lightbulb as LightbulbIcon,
  Group as GroupIcon,
  Speed as SpeedIcon,
  Security as SecurityIcon,
  School as SchoolIcon,
  Star as StarIcon,
  ArrowBack as ArrowBackIcon,
  Refresh as RefreshIcon,
  Timer as TimerIcon
} from '@mui/icons-material';
import { useSelector } from 'react-redux';
import type { RootState } from '../store';
import { getHrPositions, createInterview, submitAnswer, completeInterview } from '../services/aeonMessengerApi';

interface Position {
  id: number;
  title: string;
  qualities?: Quality[];
  is_active: boolean;
}

interface Quality {
  id: number;
  name: string;
}

interface Question {
  id: number;
  text: string;
  type: 'text' | 'scale' | 'choice';
  category?: string;
  scale?: { min: number; max: number };
}

interface Interview {
  id: number;
  position_id: number;
  questions: Question[];
  answers: { [key: string]: string };
  status: 'in_progress' | 'completed';
  score?: number;
  max_score: number;
}

interface AnalysisResult {
  glyph: string;
  title: string;
  description: string;
  status: string;
  score: number;
  max_score: number;
  recommendations: string[];
}

const HRBotNew: React.FC = () => {
  const { currentUser } = useSelector((state: RootState) => state.aeonChat);
  const [positions, setPositions] = useState<Position[]>([]);
  const [selectedPosition, setSelectedPosition] = useState<Position | null>(null);
  const [currentInterview, setCurrentInterview] = useState<Interview | null>(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answer, setAnswer] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [activeStep, setActiveStep] = useState(0);
  const [timeLeft, setTimeLeft] = useState(90); // 90 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å
  const [timerActive, setTimerActive] = useState(false);

  // –¢–∞–π–º–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (timerActive && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            setTimerActive(false);
            handleAnswerSubmit(); // –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            return 90;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [timerActive, timeLeft]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const loadPositions = async () => {
      try {
        setLoading(true);
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏...');
        const positionsData = await getHrPositions();
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:', positionsData);
        setPositions(positionsData.filter(p => p.is_active));
      } catch (error) {
        console.error('Error loading positions:', error);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∑–∏—Ü–∏–π: ' + (error as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    loadPositions();
  }, [currentUser]);

  const handlePositionSelect = async (position: Position) => {
    try {
      setLoading(true);
      setError(null);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
      const interview = await createInterview({
        position_id: position.id
      });
      
      setSelectedPosition(position);
      setCurrentInterview(interview);
      setActiveStep(1);
      setCurrentQuestionIndex(0);
      setAnswer('');
      setTimeLeft(90);
      setTimerActive(true);
    } catch (error) {
      console.error('Error creating interview:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é');
    } finally {
      setLoading(false);
    }
  };

  const handleAnswerSubmit = async () => {
    if (!currentInterview || !answer.trim()) return;

    try {
      setLoading(true);
      setTimerActive(false);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      await submitAnswer(currentInterview.id, currentQuestionIndex, answer);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
      setCurrentInterview(prev => prev ? {
        ...prev,
        answers: {
          ...prev.answers,
          [currentQuestionIndex.toString()]: answer
        }
      } : null);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
      if (currentQuestionIndex < currentInterview.questions.length - 1) {
        setCurrentQuestionIndex(prev => prev + 1);
        setAnswer('');
        setTimeLeft(90);
        setTimerActive(true);
      } else {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        const result = await completeInterview(currentInterview.id);
        setAnalysisResult({
          glyph: getGlyphForPosition(selectedPosition?.title || ''),
          title: `–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é: ${selectedPosition?.title}`,
          description: generateAnalysisDescription(result.score, result.max_score),
          status: getStatusForScore(result.score, result.max_score),
          score: result.score,
          max_score: result.max_score,
          recommendations: generateRecommendations(result.score, result.max_score, selectedPosition?.qualities || [])
        });
        setActiveStep(2);
      }
    } catch (error) {
      console.error('Error submitting answer:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleRefreshPositions = async () => {
    try {
      setLoading(true);
      setError(null);
      const positionsData = await getHrPositions();
      setPositions(positionsData.filter(p => p.is_active));
    } catch (error) {
      console.error('Error refreshing positions:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π');
    } finally {
      setLoading(false);
    }
  };

  const getGlyphForPosition = (positionTitle: string): string => {
    const glyphMap: { [key: string]: string } = {
      'Frontend Developer': 'üé®',
      'Backend Developer': '‚öôÔ∏è',
      'Full Stack Developer': 'üîÑ',
      'DevOps Engineer': 'üöÄ',
      'Data Scientist': 'üìä',
      'Product Manager': 'üìã',
      'UI/UX Designer': 'üé≠',
      'QA Engineer': 'üîç',
      'Mobile Developer': 'üì±',
      'System Administrator': 'üñ•Ô∏è',
      'Network Engineer': 'üåê',
      'Security Engineer': 'üîí'
    };
    return glyphMap[positionTitle] || 'üíº';
  };

  const generateAnalysisDescription = (score: number, maxScore: number): string => {
    const percentage = (score / maxScore) * 100;
    if (percentage >= 80) {
      return '–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.';
    } else if (percentage >= 60) {
      return '–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Ä–æ—Å—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.';
    } else {
      return '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞.';
    }
  };

  const getStatusForScore = (score: number, maxScore: number): string => {
    const percentage = (score / maxScore) * 100;
    if (percentage >= 80) return '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å';
    if (percentage >= 60) return '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å';
    return '–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è';
  };

  const generateRecommendations = (score: number, maxScore: number, qualities: Quality[]): string[] => {
    const percentage = (score / maxScore) * 100;
    const recommendations: string[] = [];

    if (percentage < 80) {
      recommendations.push('–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏');
      recommendations.push('–ò–∑—É—á–∏—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏');
    }

    if (percentage < 60) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –∫—É—Ä—Å–æ–≤');
      recommendations.push('–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }

    if (qualities.length > 0) {
      recommendations.push(`–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏—é: ${qualities.map(q => q.name).join(', ')}`);
    }

    return recommendations;
  };

  const handleRestart = () => {
    setSelectedPosition(null);
    setCurrentInterview(null);
    setCurrentQuestionIndex(0);
    setAnswer('');
    setAnalysisResult(null);
    setActiveStep(0);
    setError(null);
    setTimeLeft(90);
    setTimerActive(false);
  };

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const steps = ['–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏', '–ò–Ω—Ç–µ—Ä–≤—å—é', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'];

  if (!currentUser) {
    return (
      <Container maxWidth="md" sx={{ mt: 4 }}>
        <Alert severity="warning">
          –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        </Alert>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4 }}>
      <Typography variant="h4" gutterBottom align="center" sx={{ mb: 4 }}>
        ü§ñ HR Bot - –£–º–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
      </Typography>

      <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
        {steps.map((label) => (
          <Step key={label}>
            <StepLabel>{label}</StepLabel>
          </Step>
        ))}
      </Stepper>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* –®–∞–≥ 1: –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ */}
      {activeStep === 0 && (
        <Box>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
            <Typography variant="h5" gutterBottom>
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
            </Typography>
            <Tooltip title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π">
              <IconButton onClick={handleRefreshPositions} disabled={loading}>
                <RefreshIcon />
              </IconButton>
            </Tooltip>
          </Box>
          
          {loading ? (
            <Box display="flex" justifyContent="center" sx={{ py: 4 }}>
              <CircularProgress />
            </Box>
          ) : positions.length === 0 ? (
            <Box textAlign="center" sx={{ py: 4 }}>
              <Typography variant="h6" color="text.secondary" gutterBottom>
                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
              </Typography>
              <Typography variant="body2" color="text.secondary">
                –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
              </Typography>
            </Box>
          ) : (
            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', md: 'repeat(3, 1fr)' }, gap: 3 }}>
              {positions.map((position) => (
                <Card 
                  key={position.id}
                  elevation={3}
                  sx={{ 
                    height: '100%',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      transform: 'translateY(-4px)',
                      boxShadow: 6
                    }
                  }}
                  onClick={() => handlePositionSelect(position)}
                >
                  <CardContent sx={{ textAlign: 'center', py: 3 }}>
                    <Avatar 
                      sx={{ 
                        width: 60, 
                        height: 60, 
                        mx: 'auto', 
                        mb: 2,
                        bgcolor: 'primary.main'
                      }}
                    >
                      <WorkIcon />
                    </Avatar>
                    
                    <Typography variant="h6" gutterBottom>
                      {position.title}
                    </Typography>
                    
                    {position.qualities && position.qualities.length > 0 && (
                      <Box sx={{ mt: 2 }}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          –ö–ª—é—á–µ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:
                        </Typography>
                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, justifyContent: 'center' }}>
                          {position.qualities.map((quality) => (
                            <Chip
                              key={quality.id}
                              label={quality.name}
                              size="small"
                              variant="outlined"
                              sx={{ fontSize: '0.7rem' }}
                            />
                          ))}
                        </Box>
                      </Box>
                    )}
                    
                    <Button
                      variant="contained"
                      fullWidth
                      startIcon={<QuestionIcon />}
                      sx={{ mt: 2 }}
                    >
                      –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </Box>
          )}
        </Box>
      )}

      {/* –®–∞–≥ 2: –ò–Ω—Ç–µ—Ä–≤—å—é */}
      {activeStep === 1 && currentInterview && selectedPosition && (
        <Box>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <IconButton onClick={() => setActiveStep(0)} sx={{ mr: 2 }}>
              <ArrowBackIcon />
            </IconButton>
            <Typography variant="h5" gutterBottom>
              –ò–Ω—Ç–µ—Ä–≤—å—é: {selectedPosition.title}
            </Typography>
          </Box>
          
          <Paper sx={{ p: 3, mb: 3 }}>
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ç–∞–π–º–µ—Ä */}
            <Box sx={{ mb: 3 }}>
              <Box display="flex" justifyContent="space-between" alignItems="center" sx={{ mb: 1 }}>
                <Typography variant="body2" color="text.secondary">
                  –í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {currentInterview.questions.length}
                </Typography>
                <Box display="flex" alignItems="center" gap={1}>
                  <TimerIcon color="primary" />
                  <Typography variant="body2" color={timeLeft < 30 ? 'error' : 'text.secondary'}>
                    {formatTime(timeLeft)}
                  </Typography>
                </Box>
              </Box>
              
              <LinearProgress 
                variant="determinate" 
                value={((currentQuestionIndex + 1) / currentInterview.questions.length) * 100}
                sx={{ mb: 1 }}
              />
              
              <LinearProgress 
                variant="determinate" 
                value={(timeLeft / 90) * 100}
                color={timeLeft < 30 ? 'error' : 'primary'}
                sx={{ height: 4 }}
              />
            </Box>
            
            <Typography variant="h6" sx={{ mb: 3 }}>
              {currentInterview.questions[currentQuestionIndex]?.text}
            </Typography>
            
            <TextField
              fullWidth
              multiline
              rows={6}
              variant="outlined"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
              value={answer}
              onChange={(e) => setAnswer(e.target.value)}
              sx={{ mb: 3 }}
            />
            
            <Box display="flex" justifyContent="space-between">
              <Button
                variant="outlined"
                onClick={() => setActiveStep(0)}
                disabled={loading}
                startIcon={<ArrowBackIcon />}
              >
                –ù–∞–∑–∞–¥
              </Button>
              
              <Button
                variant="contained"
                onClick={handleAnswerSubmit}
                disabled={!answer.trim() || loading}
                endIcon={loading ? <CircularProgress size={20} /> : null}
              >
                {currentQuestionIndex === currentInterview.questions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'}
              </Button>
            </Box>
          </Paper>
        </Box>
      )}

      {/* –®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {activeStep === 2 && analysisResult && (
        <Box>
          <Typography variant="h5" gutterBottom align="center" sx={{ mb: 3 }}>
            üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é
          </Typography>
          
          <Paper sx={{ p: 3, mb: 3 }}>
            <Box display="flex" alignItems="center" sx={{ mb: 3 }}>
              <Avatar sx={{ width: 60, height: 60, fontSize: '2rem', mr: 2 }}>
                {analysisResult.glyph}
              </Avatar>
              <Box>
                <Typography variant="h6">{analysisResult.title}</Typography>
                <Typography variant="body2" color="text.secondary">
                  –°—Ç–∞—Ç—É—Å: {analysisResult.status}
                </Typography>
              </Box>
            </Box>
            
            <Divider sx={{ my: 2 }} />
            
            <Typography variant="body1" sx={{ mb: 2 }}>
              {analysisResult.description}
            </Typography>
            
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                üìä –û—Ü–µ–Ω–∫–∞: {analysisResult.score}/{analysisResult.max_score} 
                ({Math.round((analysisResult.score / analysisResult.max_score) * 100)}%)
              </Typography>
              
              <Box sx={{ width: '100%', bgcolor: 'grey.200', borderRadius: 1, overflow: 'hidden' }}>
                <Box
                  sx={{
                    width: `${(analysisResult.score / analysisResult.max_score) * 100}%`,
                    height: 8,
                    bgcolor: 'primary.main',
                    transition: 'width 0.5s ease-in-out'
                  }}
                />
              </Box>
            </Box>
            
            {analysisResult.recommendations.length > 0 && (
              <Box>
                <Typography variant="h6" gutterBottom>
                  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                </Typography>
                <Box component="ul" sx={{ pl: 2 }}>
                  {analysisResult.recommendations.map((rec, index) => (
                    <Typography key={index} component="li" variant="body2" sx={{ mb: 1 }}>
                      {rec}
                    </Typography>
                  ))}
                </Box>
              </Box>
            )}
          </Paper>
          
          <Box display="flex" justifyContent="center" gap={2}>
            <Button
              variant="contained"
              onClick={handleRestart}
              startIcon={<WorkIcon />}
            >
              –ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            </Button>
          </Box>
        </Box>
      )}
    </Container>
  );
};

export default HRBotNew; 